// Generated by CoffeeScript 1.6.3
(function() {
  var casper, lg, system, thn, timeout, url;

  lg = function() {
    console.log.apply(console, arguments);
  };

  casper = require("casper").create({
    verbose: true,
    logLevel: "debug",
    pageSettings: {
      loadImages: false,
      loadPlugins: false,
      userAgent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36"
    },
    viewportSize: {
      width: 2000,
      height: 2000
    }
  });

  system = require('system');

  url = "http://www.amazon.com/gp/goldbox/all-deals/ref=sv_gb_1";

  casper.start().thenOpen(url, function() {
    return null;
  });

  casper.waitFor(function() {
    return this.evaluate(function() {
      var lists, ret;
      ret = true;
      lists = jQuery(".gbwshoveler-content ul");
      if (!(lists.length > 10)) {
        return false;
      }
      return true;
    });
  }, thn = function() {
    return null;
  }, timeout = function() {
    return null;
  }, 15000);

  casper.then(function() {
    return this.evaluate(function() {
      window.preCategories = [];
      return jQuery(".ONETHIRTYFIVE-HERO").each(function(id, el) {
        var $el;
        $el = jQuery(this);
        window.preCategories.push({
          $node: $el,
          totalPages: parseInt($el.find(".gbwpagination span").text()),
          shownPage: function() {
            return parseInt(this.$node.find(".gbwpagination span").text());
          },
          awaitingPage: 1,
          savedPage: 0,
          items: [],
          finished: false,
          title: $el.find(".gbh2cont h2").text(),
          nextPage: function() {
            return this.$node.find(".next-button a").click();
          }
        });
        return true;
      });
    });
  });

  casper.waitFor(function() {
    return this.evaluate(function() {
      return (function() {
        var ret;
        ret = true;
        window.preCategories.forEach(function(el, ind) {
          var lis;
          if (!(ind === 2)) {
            return null;
          }
          if (el.savedPage < el.totalPages) {
            ret = false;
          } else {
            return null;
          }
          if (el.$node.find("li.spinner > div > img").length > 0) {
            console.log("spining total:" + el.totalPages + ";saved:" + el.savedPage + ";awaiing:" + el.awaitingPage);
            return null;
          }
          if (el.awaitingPage > el.shownPage()) {
            return null;
          }
          if (el.shownPage() > el.savedPage) {
            lis = el.$node.find("ul li");
            lis.each(function(id, li) {
              var $li, item;
              $li = jQuery(this);
              item = {
                imageUrl: $li.find(".prodimg img").attr("src"),
                linkUrl: $li.find(".title a").attr("href"),
                description: $li.find(".title a").text(),
                timeLeft: $li.find(".ldtimeleft > span").text()
              };
              if (item.imageUrl && item.description && item.timeLeft && item.linkUrl) {
                el.items.push(item);
              }
              return true;
            });
            el.savedPage++;
            if (el.savedPage < el.totalPages) {
              el.$node.find(".next-button a").click();
              return el.awaitingPage++;
            }
          }
        });
        return ret;
      })();
    });
  }, thn = function() {
    return null;
  }, timeout = function() {
    this.log("Timeout scraping page");
    return casper.exit();
  }, 70000);

  casper.then(function() {
    var cats, self;
    cats = this.evaluate(function() {
      var categories;
      categories = [];
      window.preCategories.forEach(function(el, ind) {
        return categories.push({
          title: el.title,
          items: el.items
        });
      });
      return categories;
    });
    self = this;
    self.open("http://localhost:5000/", {
      method: "post",
      data: JSON.stringify(cats)
    }, function() {
      return this.echo("post done");
    });
    return this.echo(JSON.stringify(cats));
  });

  casper.run();

}).call(this);
